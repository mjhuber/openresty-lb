user root;
worker_processes 4;
pid /var/run/nginx.pid;
env DD_PROD;
env DD_PROD_PORT;
env DD_PROD_WEIGHT;
env DD_CANDIDATE;
env DD_CANDIDATE_PORT;
env DD_CANDIDATE_WEIGHT;

events {
    worker_connections 4096;
}

http {
    error_log stderr warn;
    access_log /dev/stdout;
    lua_package_path "/usr/local/lib/lua-resty-balancer-0.03/lib/resty/chash.lua;;";
    lua_package_cpath "/usr/local/openresty/lualib/librestychash.so;;";
}

stream {
    init_by_lua_block {
        local resty_chash = require "resty.chash"
        local server_list = {
            [os.getenv("DD_PROD") .. ":" .. os.getenv("DD_PROD_PORT")] = tonumber(os.getenv("DD_PROD_WEIGHT")),
            [os.getenv("DD_CANDIDATE") .. ":" .. os.getenv("DD_CANDIDATE_PORT")] = tonumber(os.getenv("DD_CANDIDATE_WEIGHT"))
        }

        -- XX: we can do the following steps to keep consistency with nginx chash
        local str_null = string.char(0)

        local servers, nodes = {}, {}
        for serv, weight in pairs(server_list) do
            local id = string.gsub(serv, ":", str_null)

            servers[id] = serv
            nodes[id] = weight
        end

        local chash_up = resty_chash:new(nodes)
        package.loaded.my_chash_up = chash_up
        package.loaded.my_servers = servers
    }

    upstream passthru {
        server 0.0.0.1:1234;
        balancer_by_lua_block {
            local balancer = require "ngx.balancer"

            local chash_up = package.loaded.my_chash_up
            local servers = package.loaded.my_servers

            local id = chash_up:find(ngx.var.msec)
            local server = servers[id]
            assert(balancer.set_current_peer(server))
        }
    }

    server {
        listen 80;
        proxy_pass passthru;
    }
}
